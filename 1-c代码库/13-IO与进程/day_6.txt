【1】时钟函数
 函数原型：unsigned int alarm(unsigned int seconds);
 功能：在seconds秒之后进程收到SIGALRM
 返回值：  成功  0
                 返回上一次执行alarm剩余的时间

【2】system V IPC---消息队列

    消息队列的操作包括：
	    创建或打开消息队列
		添加消息
		读取消息
		控制消息队列
		
	Key值：
	      key_t ftok(const char *pathname, int proj_id);
		  功能：生成key值
		  参数：pathname   路径名
		        proj_id    'a'
		  返回值：  成功  key值
		            失败  -1
		
    1）创建或打开消息队列使用的函数是msgget，这里创建的消息队列的数量会受到系统消息队列数量的限制
	函数原型：int msgget(key_t key, int msgflg);
	功能：创建或打开一个消息队列
	参数：key   IPC_PRIVATE
	            ftok的返回值
		  msgflg  IPC_CREAT|IPC_EXCL|0664   此时表示创建一个消息队列（如果队列存在报错）
		          0664                      此时表示打开一个消息队列
	返回值：成功   msqid  消息队列标识符
            失败   -1	
			
	2）添加消息使用的函数是msgsnd，按照类型把消息添加到已打开的消息队列末尾
	函数原型：int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
	功能：添加消息到队列的末尾
	参数：msqid    消息队列标识符
	      msgp      
		           struct msgbuf {
                          long mtype;       /* message type, must be > 0 */  消息的类型
                          char mtext[1];    /* message data */     消息正文  （形式不固定）
                   };
		  msgsz    消息正文的长度       sizeof(struct msgbuf) - sizeof(long)
		  msgflg   默认为0 
	返回值： 成功   0
	         失败   -1

    3）	读取消息使用的函数是msgrcv，可以按照类型把消息从消息队列中取走
	函数原型：ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);
	功能：从消息队列中移除一个消息
	参数：msqid    消息队列标识符
	      msgp     结构体指针，保存读取的内容
		  msgsz    消息正文的长度       sizeof(struct msgbuf) - sizeof(long)
		  msgtyp   消息的类型     0     读取消息队列中第一个消息
		                         大于0  指定读取消息队列中类型为msgtyp的第一个消息
								 小于0  读取消息队列中类型为msftyp的绝对值或者是不小于msgtyp的绝对值且最小的一个消息
		  msgflg   默认为0
	返回值： 成功  消息正文的长度
	         失败  -1
		  
	4）控制消息队列使用的函数是msgctl，它可以完成多项功能
	函数原型：int msgctl(int msqid, int cmd, struct msqid_ds *buf);
	功能：控制消息队列
	参数：msqid   消息队列标识符
	      cmd     IPC_STAT   将消息队列的属性信息复制到第三个参数所指定的结构体中
		          IPC_SET    设置消息队列的属性
				  IPC_RMID   删除消息队列
	返回值：成功  0
	        失败  -1
			
			
    5）shell查看Linux下的消息队列
	   查看：ipcs  -q
	   删除：ipcrm  -q  +  msqid
	   
【3】system V IPC---共享内存
 
    机制：将实际的内存空间映射到进程的虚拟地址空间中（将物理地址转换为可操作虚拟地址）
	
	共享内存是一种最为高效的进程间通信方式，进程可以直接读写内存，而不需要任何数据的拷贝
	
	共享内存需要借助一些同步互斥机制，通常与信号灯结合使用
	
	
	共享内存的使用包括如下步骤：

    1）创建/打开共享内存
    函数原型：int shmget(key_t key, size_t size, int shmflg);
	功能：创建或打开一块实际内存空间，并且返回一个共享内存标识符
	参数：key   IPC_PRIVATE
	            ftok的返回值
	      size  共享内存区域的大小
          shmflg 	IPC_CREAT|IPC_EXCL|0664	 创建一快共享内存区域
		            0664                     打开一块共享内存区域
	返回值：成功  shmid  共享内存标识符
	        失败  -1
				
	2）映射共享内存，即把指定的共享内存映射到进程的地址空间用于访问
	函数原型：void *shmat(int shmid, const void *shmaddr, int shmflg);
	功能：将实际内存区域映射到进程的虚拟地址空间中
	参数：shmid   共享内存的标识符
	      shmaddr  默认为NULL，选择合适的虚拟内存区域完成映射
		  shmflg   0   可读可写
    返回值：成功   映射之后，虚拟地址
	        失败   -1

    3）撤销共享内存映射
	函数原型： int shmdt(const void *shmaddr);
    功能：断开映射关系
	参数：shmaddr   映射之后，虚拟地址（shmat返回值）
    返回值：成功    0
	        失败    -1
	4）删除共享内存对象
	函数原型： int shmctl(int shmid, int cmd, struct shmid_ds *buf);
	功能：共享内存操作函数
	参数：shmid  共享内存的标识符 
	      cmd    IPC_STAT    复制共享内存的属性信息到第三个参数所指的结构体中
				 IPC_SET     设置共享内存的属性
				 IPC_RMID    关闭共享内存
	返回值：成功   0
	        失败   -1
    5）shell查看Linux下的共享内存
	查看  ipcs  -m
	关闭  ipcrm  -m  +  shmid
	
	
【4】system V IPC---信号灯（信号量集）
  
    函数原型:int semget(key_t key, int nsems, int semflg);
	功能：创建或打开信号灯
	参数：key  IPC_PRIVATE
	           ftok的返回值
		  nsems  信号量的个数
		  semflg  IPC_CREAT|IPC_EXCL|0664  创建信号灯
		          0664                     打开信号灯
	返回值：成功	semid   信号灯的标识符
	        失败    -1
		
	函数原型：int semctl(int semid, int semnum, int cmd, ...);
	功能：对信号量集中的某一个信号量进行控制操作
	参数：semid   信号灯的标识符
	      semnum  操作的信号量的编号
		  cmd     IPC_RMID  删除一个信号量
		          GETVAL    获取信号量的当前的值
				  SETVAL    设置信号量的值，需要设置第四个参数
				  
		  union semun {
               int     val;    /* Value for SETVAL */  信号量的值
		  }
	返回值：成功     大部分为0
	                 GETVAL    返回信号量的值
			失败     -1
			
	函数原型：int semop(int semid, struct sembuf *sops, unsigned nsops);
	功能：P/V操作
	参数：semid    信号灯的标识符
	      sops              
					unsigned short sem_num;  /* semaphore number */   信号量的编号
					short          sem_op;   /* semaphore operation */  
					                                           1      释放资源（V操作）
															   0      等待，直到信号灯的值变成0
                                                               -1     申请资源（P操作）
					short          sem_flg;  /* operation flags */
					                                           0      执行默认操作
	      nsops   需要操作的信号量的个数
	返回值：成功  0
	        失败  -1
		  
 


	
	
	  
 
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	       


 